package editor;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JToolBar;



public class Gift_Gui {
	
	static JFileChooser findFile = new JFileChooser();
    static File currentFile, afile;
    static String content, filePath;
	private JToolBar toolBar;
	private Action newAction,exitAction;
	static PrintWriter out;
	static JFrame f;

	public Gift_Gui(){
		initialize();
	}
	
	private void initialize() {
		toolBar = new JToolBar(null, JToolBar.VERTICAL);
		
		newAction = new NewAction();
		exitAction = new ExitAction();
		
		f = new JFrame("Gift Editor");
	    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    JTabbedPane jtp = new JTabbedPane();
	    jtp.addTab("Multiiple Choiese",new MultipleChoice());
	    jtp.addTab("Short Answer",new Shortanswer());
	    jtp.addTab("Matching", new Matching());
	    jtp.addTab("True-False", new TrueFalseQ());
	    jtp.addTab("Essay", new Essay());
	    jtp.addTab("Numerical", new Numerical());
	
	    toolBar.add(newAction);
	    toolBar.add(exitAction);
	    
	    f.add(jtp,BorderLayout.CENTER);
	    f.add(toolBar,BorderLayout.WEST);
	    f.pack();
	    f.setSize(1000, 600);
	    f.setVisible(true);
	}
	
	class NewAction extends AbstractAction {

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		private Object currentFile;

		public NewAction() {
			putValue(NAME, "New File");
			putValue(SMALL_ICON, new ImageIcon(("images/new.png")));
			putValue(SHORT_DESCRIPTION, "New Gift.txt file");
			putValue(MNEMONIC_KEY, new Integer('N'));
		}

		public void actionPerformed(ActionEvent e) {
			
			int message = 0;				
			
			if(currentFile!=null){
				message = JOptionPane.showConfirmDialog(null, 
						"Have you saved your questions before leaving?",
						"Leaving current file",JOptionPane.YES_NO_OPTION);
			
				if (message == JOptionPane.YES_OPTION){
					currentFile=null;
					newSaveFile("");
				}
			}
			else
				newSaveFile("");
		}
	}
	

class ExitAction extends AbstractAction {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public ExitAction() {
		putValue(NAME, "Exit");
		putValue(SMALL_ICON, new ImageIcon(("images/exit.png")));
		putValue(SHORT_DESCRIPTION, "Exit");
		putValue(MNEMONIC_KEY, new Integer('E'));
	}

	public void actionPerformed(ActionEvent e) {
		
		System.exit(0);			
	}
}
public static void newSaveFile(String content){
	
	if(currentFile==null){
		int saveResult = findFile.showSaveDialog(null);
		if(saveResult == JFileChooser.APPROVE_OPTION)
			currentFile = findFile.getSelectedFile();
	}
	
	if(currentFile!=null){
		
		filePath = currentFile.getPath();
    	
    	if(!filePath.endsWith(".txt")){
    		filePath+=".txt";
    		currentFile = new File(filePath);
    	}
    	try{
    		out = new PrintWriter(new BufferedWriter(new FileWriter(filePath, true)));
    		out.append(content);
    		out.close();
    		f.setTitle("Gift Text Editor - " + filePath);
    	}catch (Exception e) {}	
	}
}

}

